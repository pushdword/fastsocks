// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth_struct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "auth_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* authenticate_solicitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  authenticate_solicitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* authenticate_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  authenticate_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* authenticate_acknowledgement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  authenticate_acknowledgement_reflection_ = NULL;
const ::google::protobuf::Descriptor* register_solicitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  register_solicitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* register_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  register_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* connection_solicitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connection_solicitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* connection_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connection_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* connection_acknowledgement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connection_acknowledgement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_auth_5fstruct_2eproto() {
  protobuf_AddDesc_auth_5fstruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "auth_struct.proto");
  GOOGLE_CHECK(file != NULL);
  authenticate_solicitation_descriptor_ = file->message_type(0);
  static const int authenticate_solicitation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_solicitation, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_solicitation, usr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_solicitation, pw_),
  };
  authenticate_solicitation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      authenticate_solicitation_descriptor_,
      authenticate_solicitation::default_instance_,
      authenticate_solicitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_solicitation, _has_bits_[0]),
      -1,
      -1,
      sizeof(authenticate_solicitation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_solicitation, _internal_metadata_),
      -1);
  authenticate_response_descriptor_ = file->message_type(1);
  static const int authenticate_response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_response, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_response, token_),
  };
  authenticate_response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      authenticate_response_descriptor_,
      authenticate_response::default_instance_,
      authenticate_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_response, _has_bits_[0]),
      -1,
      -1,
      sizeof(authenticate_response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_response, _internal_metadata_),
      -1);
  authenticate_acknowledgement_descriptor_ = file->message_type(2);
  static const int authenticate_acknowledgement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_acknowledgement, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_acknowledgement, token_),
  };
  authenticate_acknowledgement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      authenticate_acknowledgement_descriptor_,
      authenticate_acknowledgement::default_instance_,
      authenticate_acknowledgement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_acknowledgement, _has_bits_[0]),
      -1,
      -1,
      sizeof(authenticate_acknowledgement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(authenticate_acknowledgement, _internal_metadata_),
      -1);
  register_solicitation_descriptor_ = file->message_type(3);
  static const int register_solicitation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_solicitation, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_solicitation, token_),
  };
  register_solicitation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      register_solicitation_descriptor_,
      register_solicitation::default_instance_,
      register_solicitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_solicitation, _has_bits_[0]),
      -1,
      -1,
      sizeof(register_solicitation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_solicitation, _internal_metadata_),
      -1);
  register_response_descriptor_ = file->message_type(4);
  static const int register_response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, regnr_),
  };
  register_response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      register_response_descriptor_,
      register_response::default_instance_,
      register_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, _has_bits_[0]),
      -1,
      -1,
      sizeof(register_response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(register_response, _internal_metadata_),
      -1);
  connection_solicitation_descriptor_ = file->message_type(5);
  static const int connection_solicitation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_solicitation, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_solicitation, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_solicitation, regnr_),
  };
  connection_solicitation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      connection_solicitation_descriptor_,
      connection_solicitation::default_instance_,
      connection_solicitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_solicitation, _has_bits_[0]),
      -1,
      -1,
      sizeof(connection_solicitation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_solicitation, _internal_metadata_),
      -1);
  connection_response_descriptor_ = file->message_type(6);
  static const int connection_response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_response, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_response, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_response, port_),
  };
  connection_response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      connection_response_descriptor_,
      connection_response::default_instance_,
      connection_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_response, _has_bits_[0]),
      -1,
      -1,
      sizeof(connection_response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_response, _internal_metadata_),
      -1);
  connection_acknowledgement_descriptor_ = file->message_type(7);
  static const int connection_acknowledgement_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_acknowledgement, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_acknowledgement, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_acknowledgement, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_acknowledgement, port_),
  };
  connection_acknowledgement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      connection_acknowledgement_descriptor_,
      connection_acknowledgement::default_instance_,
      connection_acknowledgement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_acknowledgement, _has_bits_[0]),
      -1,
      -1,
      sizeof(connection_acknowledgement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connection_acknowledgement, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_auth_5fstruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      authenticate_solicitation_descriptor_, &authenticate_solicitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      authenticate_response_descriptor_, &authenticate_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      authenticate_acknowledgement_descriptor_, &authenticate_acknowledgement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      register_solicitation_descriptor_, &register_solicitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      register_response_descriptor_, &register_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      connection_solicitation_descriptor_, &connection_solicitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      connection_response_descriptor_, &connection_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      connection_acknowledgement_descriptor_, &connection_acknowledgement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_auth_5fstruct_2eproto() {
  delete authenticate_solicitation::default_instance_;
  delete authenticate_solicitation_reflection_;
  delete authenticate_response::default_instance_;
  delete authenticate_response_reflection_;
  delete authenticate_acknowledgement::default_instance_;
  delete authenticate_acknowledgement_reflection_;
  delete register_solicitation::default_instance_;
  delete register_solicitation_reflection_;
  delete register_response::default_instance_;
  delete register_response_reflection_;
  delete connection_solicitation::default_instance_;
  delete connection_solicitation_reflection_;
  delete connection_response::default_instance_;
  delete connection_response_reflection_;
  delete connection_acknowledgement::default_instance_;
  delete connection_acknowledgement_reflection_;
}

void protobuf_AddDesc_auth_5fstruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021auth_struct.proto\"D\n\031authenticate_soli"
    "citation\022\016\n\006header\030\001 \001(\005\022\013\n\003usr\030\002 \001(\t\022\n\n"
    "\002pw\030\003 \001(\t\"6\n\025authenticate_response\022\016\n\006he"
    "ader\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\"=\n\034authenticat"
    "e_acknowledgement\022\016\n\006header\030\001 \001(\005\022\r\n\005tok"
    "en\030\002 \001(\t\"6\n\025register_solicitation\022\016\n\006hea"
    "der\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\"A\n\021register_res"
    "ponse\022\016\n\006header\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\022\r\n\005"
    "regnr\030\003 \001(\t\"G\n\027connection_solicitation\022\016"
    "\n\006header\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\022\r\n\005regnr\030\003"
    " \001(\t\"\?\n\023connection_response\022\016\n\006header\030\001 "
    "\001(\005\022\n\n\002ip\030\002 \001(\r\022\014\n\004port\030\003 \001(\r\"U\n\032connect"
    "ion_acknowledgement\022\016\n\006header\030\001 \001(\005\022\r\n\005t"
    "oken\030\002 \001(\t\022\n\n\002ip\030\003 \001(\r\022\014\n\004port\030\004 \001(\r", 556);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "auth_struct.proto", &protobuf_RegisterTypes);
  authenticate_solicitation::default_instance_ = new authenticate_solicitation();
  authenticate_response::default_instance_ = new authenticate_response();
  authenticate_acknowledgement::default_instance_ = new authenticate_acknowledgement();
  register_solicitation::default_instance_ = new register_solicitation();
  register_response::default_instance_ = new register_response();
  connection_solicitation::default_instance_ = new connection_solicitation();
  connection_response::default_instance_ = new connection_response();
  connection_acknowledgement::default_instance_ = new connection_acknowledgement();
  authenticate_solicitation::default_instance_->InitAsDefaultInstance();
  authenticate_response::default_instance_->InitAsDefaultInstance();
  authenticate_acknowledgement::default_instance_->InitAsDefaultInstance();
  register_solicitation::default_instance_->InitAsDefaultInstance();
  register_response::default_instance_->InitAsDefaultInstance();
  connection_solicitation::default_instance_->InitAsDefaultInstance();
  connection_response::default_instance_->InitAsDefaultInstance();
  connection_acknowledgement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_auth_5fstruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_auth_5fstruct_2eproto {
  StaticDescriptorInitializer_auth_5fstruct_2eproto() {
    protobuf_AddDesc_auth_5fstruct_2eproto();
  }
} static_descriptor_initializer_auth_5fstruct_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int authenticate_solicitation::kHeaderFieldNumber;
const int authenticate_solicitation::kUsrFieldNumber;
const int authenticate_solicitation::kPwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

authenticate_solicitation::authenticate_solicitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:authenticate_solicitation)
}

void authenticate_solicitation::InitAsDefaultInstance() {
}

authenticate_solicitation::authenticate_solicitation(const authenticate_solicitation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:authenticate_solicitation)
}

void authenticate_solicitation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = 0;
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

authenticate_solicitation::~authenticate_solicitation() {
  // @@protoc_insertion_point(destructor:authenticate_solicitation)
  SharedDtor();
}

void authenticate_solicitation::SharedDtor() {
  usr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void authenticate_solicitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* authenticate_solicitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return authenticate_solicitation_descriptor_;
}

const authenticate_solicitation& authenticate_solicitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fstruct_2eproto();
  return *default_instance_;
}

authenticate_solicitation* authenticate_solicitation::default_instance_ = NULL;

authenticate_solicitation* authenticate_solicitation::New(::google::protobuf::Arena* arena) const {
  authenticate_solicitation* n = new authenticate_solicitation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void authenticate_solicitation::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    header_ = 0;
    if (has_usr()) {
      usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pw()) {
      pw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool authenticate_solicitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:authenticate_solicitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_usr;
        break;
      }

      // optional string usr = 2;
      case 2: {
        if (tag == 18) {
         parse_usr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usr().data(), this->usr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authenticate_solicitation.usr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pw;
        break;
      }

      // optional string pw = 3;
      case 3: {
        if (tag == 26) {
         parse_pw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pw().data(), this->pw().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authenticate_solicitation.pw");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:authenticate_solicitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:authenticate_solicitation)
  return false;
#undef DO_
}

void authenticate_solicitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:authenticate_solicitation)
  // optional int32 header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header(), output);
  }

  // optional string usr = 2;
  if (has_usr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usr().data(), this->usr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authenticate_solicitation.usr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr(), output);
  }

  // optional string pw = 3;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pw().data(), this->pw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authenticate_solicitation.pw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:authenticate_solicitation)
}

::google::protobuf::uint8* authenticate_solicitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:authenticate_solicitation)
  // optional int32 header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header(), target);
  }

  // optional string usr = 2;
  if (has_usr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usr().data(), this->usr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authenticate_solicitation.usr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->usr(), target);
  }

  // optional string pw = 3;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pw().data(), this->pw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authenticate_solicitation.pw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authenticate_solicitation)
  return target;
}

int authenticate_solicitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }

    // optional string usr = 2;
    if (has_usr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usr());
    }

    // optional string pw = 3;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pw());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void authenticate_solicitation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const authenticate_solicitation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const authenticate_solicitation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void authenticate_solicitation::MergeFrom(const authenticate_solicitation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_usr()) {
      set_has_usr();
      usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
    }
    if (from.has_pw()) {
      set_has_pw();
      pw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pw_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void authenticate_solicitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void authenticate_solicitation::CopyFrom(const authenticate_solicitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool authenticate_solicitation::IsInitialized() const {

  return true;
}

void authenticate_solicitation::Swap(authenticate_solicitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void authenticate_solicitation::InternalSwap(authenticate_solicitation* other) {
  std::swap(header_, other->header_);
  usr_.Swap(&other->usr_);
  pw_.Swap(&other->pw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata authenticate_solicitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = authenticate_solicitation_descriptor_;
  metadata.reflection = authenticate_solicitation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// authenticate_solicitation

// optional int32 header = 1;
bool authenticate_solicitation::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void authenticate_solicitation::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void authenticate_solicitation::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void authenticate_solicitation::clear_header() {
  header_ = 0;
  clear_has_header();
}
 ::google::protobuf::int32 authenticate_solicitation::header() const {
  // @@protoc_insertion_point(field_get:authenticate_solicitation.header)
  return header_;
}
 void authenticate_solicitation::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:authenticate_solicitation.header)
}

// optional string usr = 2;
bool authenticate_solicitation::has_usr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void authenticate_solicitation::set_has_usr() {
  _has_bits_[0] |= 0x00000002u;
}
void authenticate_solicitation::clear_has_usr() {
  _has_bits_[0] &= ~0x00000002u;
}
void authenticate_solicitation::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usr();
}
 const ::std::string& authenticate_solicitation::usr() const {
  // @@protoc_insertion_point(field_get:authenticate_solicitation.usr)
  return usr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void authenticate_solicitation::set_usr(const ::std::string& value) {
  set_has_usr();
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authenticate_solicitation.usr)
}
 void authenticate_solicitation::set_usr(const char* value) {
  set_has_usr();
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authenticate_solicitation.usr)
}
 void authenticate_solicitation::set_usr(const char* value, size_t size) {
  set_has_usr();
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authenticate_solicitation.usr)
}
 ::std::string* authenticate_solicitation::mutable_usr() {
  set_has_usr();
  // @@protoc_insertion_point(field_mutable:authenticate_solicitation.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* authenticate_solicitation::release_usr() {
  clear_has_usr();
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void authenticate_solicitation::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    set_has_usr();
  } else {
    clear_has_usr();
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:authenticate_solicitation.usr)
}

// optional string pw = 3;
bool authenticate_solicitation::has_pw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void authenticate_solicitation::set_has_pw() {
  _has_bits_[0] |= 0x00000004u;
}
void authenticate_solicitation::clear_has_pw() {
  _has_bits_[0] &= ~0x00000004u;
}
void authenticate_solicitation::clear_pw() {
  pw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pw();
}
 const ::std::string& authenticate_solicitation::pw() const {
  // @@protoc_insertion_point(field_get:authenticate_solicitation.pw)
  return pw_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void authenticate_solicitation::set_pw(const ::std::string& value) {
  set_has_pw();
  pw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authenticate_solicitation.pw)
}
 void authenticate_solicitation::set_pw(const char* value) {
  set_has_pw();
  pw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authenticate_solicitation.pw)
}
 void authenticate_solicitation::set_pw(const char* value, size_t size) {
  set_has_pw();
  pw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authenticate_solicitation.pw)
}
 ::std::string* authenticate_solicitation::mutable_pw() {
  set_has_pw();
  // @@protoc_insertion_point(field_mutable:authenticate_solicitation.pw)
  return pw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* authenticate_solicitation::release_pw() {
  clear_has_pw();
  return pw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void authenticate_solicitation::set_allocated_pw(::std::string* pw) {
  if (pw != NULL) {
    set_has_pw();
  } else {
    clear_has_pw();
  }
  pw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pw);
  // @@protoc_insertion_point(field_set_allocated:authenticate_solicitation.pw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int authenticate_response::kHeaderFieldNumber;
const int authenticate_response::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

authenticate_response::authenticate_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:authenticate_response)
}

void authenticate_response::InitAsDefaultInstance() {
}

authenticate_response::authenticate_response(const authenticate_response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:authenticate_response)
}

void authenticate_response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

authenticate_response::~authenticate_response() {
  // @@protoc_insertion_point(destructor:authenticate_response)
  SharedDtor();
}

void authenticate_response::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void authenticate_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* authenticate_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return authenticate_response_descriptor_;
}

const authenticate_response& authenticate_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fstruct_2eproto();
  return *default_instance_;
}

authenticate_response* authenticate_response::default_instance_ = NULL;

authenticate_response* authenticate_response::New(::google::protobuf::Arena* arena) const {
  authenticate_response* n = new authenticate_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void authenticate_response::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    header_ = 0;
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool authenticate_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:authenticate_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authenticate_response.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:authenticate_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:authenticate_response)
  return false;
#undef DO_
}

void authenticate_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:authenticate_response)
  // optional int32 header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authenticate_response.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:authenticate_response)
}

::google::protobuf::uint8* authenticate_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:authenticate_response)
  // optional int32 header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authenticate_response.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authenticate_response)
  return target;
}

int authenticate_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void authenticate_response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const authenticate_response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const authenticate_response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void authenticate_response::MergeFrom(const authenticate_response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void authenticate_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void authenticate_response::CopyFrom(const authenticate_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool authenticate_response::IsInitialized() const {

  return true;
}

void authenticate_response::Swap(authenticate_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void authenticate_response::InternalSwap(authenticate_response* other) {
  std::swap(header_, other->header_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata authenticate_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = authenticate_response_descriptor_;
  metadata.reflection = authenticate_response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// authenticate_response

// optional int32 header = 1;
bool authenticate_response::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void authenticate_response::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void authenticate_response::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void authenticate_response::clear_header() {
  header_ = 0;
  clear_has_header();
}
 ::google::protobuf::int32 authenticate_response::header() const {
  // @@protoc_insertion_point(field_get:authenticate_response.header)
  return header_;
}
 void authenticate_response::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:authenticate_response.header)
}

// optional string token = 2;
bool authenticate_response::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void authenticate_response::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void authenticate_response::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void authenticate_response::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& authenticate_response::token() const {
  // @@protoc_insertion_point(field_get:authenticate_response.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void authenticate_response::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authenticate_response.token)
}
 void authenticate_response::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authenticate_response.token)
}
 void authenticate_response::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authenticate_response.token)
}
 ::std::string* authenticate_response::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:authenticate_response.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* authenticate_response::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void authenticate_response::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:authenticate_response.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int authenticate_acknowledgement::kHeaderFieldNumber;
const int authenticate_acknowledgement::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

authenticate_acknowledgement::authenticate_acknowledgement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:authenticate_acknowledgement)
}

void authenticate_acknowledgement::InitAsDefaultInstance() {
}

authenticate_acknowledgement::authenticate_acknowledgement(const authenticate_acknowledgement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:authenticate_acknowledgement)
}

void authenticate_acknowledgement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

authenticate_acknowledgement::~authenticate_acknowledgement() {
  // @@protoc_insertion_point(destructor:authenticate_acknowledgement)
  SharedDtor();
}

void authenticate_acknowledgement::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void authenticate_acknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* authenticate_acknowledgement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return authenticate_acknowledgement_descriptor_;
}

const authenticate_acknowledgement& authenticate_acknowledgement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fstruct_2eproto();
  return *default_instance_;
}

authenticate_acknowledgement* authenticate_acknowledgement::default_instance_ = NULL;

authenticate_acknowledgement* authenticate_acknowledgement::New(::google::protobuf::Arena* arena) const {
  authenticate_acknowledgement* n = new authenticate_acknowledgement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void authenticate_acknowledgement::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    header_ = 0;
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool authenticate_acknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:authenticate_acknowledgement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authenticate_acknowledgement.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:authenticate_acknowledgement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:authenticate_acknowledgement)
  return false;
#undef DO_
}

void authenticate_acknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:authenticate_acknowledgement)
  // optional int32 header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authenticate_acknowledgement.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:authenticate_acknowledgement)
}

::google::protobuf::uint8* authenticate_acknowledgement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:authenticate_acknowledgement)
  // optional int32 header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authenticate_acknowledgement.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:authenticate_acknowledgement)
  return target;
}

int authenticate_acknowledgement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void authenticate_acknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const authenticate_acknowledgement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const authenticate_acknowledgement>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void authenticate_acknowledgement::MergeFrom(const authenticate_acknowledgement& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void authenticate_acknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void authenticate_acknowledgement::CopyFrom(const authenticate_acknowledgement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool authenticate_acknowledgement::IsInitialized() const {

  return true;
}

void authenticate_acknowledgement::Swap(authenticate_acknowledgement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void authenticate_acknowledgement::InternalSwap(authenticate_acknowledgement* other) {
  std::swap(header_, other->header_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata authenticate_acknowledgement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = authenticate_acknowledgement_descriptor_;
  metadata.reflection = authenticate_acknowledgement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// authenticate_acknowledgement

// optional int32 header = 1;
bool authenticate_acknowledgement::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void authenticate_acknowledgement::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void authenticate_acknowledgement::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void authenticate_acknowledgement::clear_header() {
  header_ = 0;
  clear_has_header();
}
 ::google::protobuf::int32 authenticate_acknowledgement::header() const {
  // @@protoc_insertion_point(field_get:authenticate_acknowledgement.header)
  return header_;
}
 void authenticate_acknowledgement::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:authenticate_acknowledgement.header)
}

// optional string token = 2;
bool authenticate_acknowledgement::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void authenticate_acknowledgement::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void authenticate_acknowledgement::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void authenticate_acknowledgement::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& authenticate_acknowledgement::token() const {
  // @@protoc_insertion_point(field_get:authenticate_acknowledgement.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void authenticate_acknowledgement::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:authenticate_acknowledgement.token)
}
 void authenticate_acknowledgement::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:authenticate_acknowledgement.token)
}
 void authenticate_acknowledgement::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:authenticate_acknowledgement.token)
}
 ::std::string* authenticate_acknowledgement::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:authenticate_acknowledgement.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* authenticate_acknowledgement::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void authenticate_acknowledgement::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:authenticate_acknowledgement.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int register_solicitation::kHeaderFieldNumber;
const int register_solicitation::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

register_solicitation::register_solicitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:register_solicitation)
}

void register_solicitation::InitAsDefaultInstance() {
}

register_solicitation::register_solicitation(const register_solicitation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:register_solicitation)
}

void register_solicitation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

register_solicitation::~register_solicitation() {
  // @@protoc_insertion_point(destructor:register_solicitation)
  SharedDtor();
}

void register_solicitation::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void register_solicitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* register_solicitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return register_solicitation_descriptor_;
}

const register_solicitation& register_solicitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fstruct_2eproto();
  return *default_instance_;
}

register_solicitation* register_solicitation::default_instance_ = NULL;

register_solicitation* register_solicitation::New(::google::protobuf::Arena* arena) const {
  register_solicitation* n = new register_solicitation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void register_solicitation::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    header_ = 0;
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool register_solicitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:register_solicitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "register_solicitation.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:register_solicitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:register_solicitation)
  return false;
#undef DO_
}

void register_solicitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:register_solicitation)
  // optional int32 header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_solicitation.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:register_solicitation)
}

::google::protobuf::uint8* register_solicitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:register_solicitation)
  // optional int32 header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_solicitation.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:register_solicitation)
  return target;
}

int register_solicitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void register_solicitation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const register_solicitation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const register_solicitation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void register_solicitation::MergeFrom(const register_solicitation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void register_solicitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_solicitation::CopyFrom(const register_solicitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_solicitation::IsInitialized() const {

  return true;
}

void register_solicitation::Swap(register_solicitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void register_solicitation::InternalSwap(register_solicitation* other) {
  std::swap(header_, other->header_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata register_solicitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = register_solicitation_descriptor_;
  metadata.reflection = register_solicitation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// register_solicitation

// optional int32 header = 1;
bool register_solicitation::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void register_solicitation::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void register_solicitation::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void register_solicitation::clear_header() {
  header_ = 0;
  clear_has_header();
}
 ::google::protobuf::int32 register_solicitation::header() const {
  // @@protoc_insertion_point(field_get:register_solicitation.header)
  return header_;
}
 void register_solicitation::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:register_solicitation.header)
}

// optional string token = 2;
bool register_solicitation::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void register_solicitation::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void register_solicitation::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void register_solicitation::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& register_solicitation::token() const {
  // @@protoc_insertion_point(field_get:register_solicitation.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void register_solicitation::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:register_solicitation.token)
}
 void register_solicitation::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:register_solicitation.token)
}
 void register_solicitation::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:register_solicitation.token)
}
 ::std::string* register_solicitation::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:register_solicitation.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* register_solicitation::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void register_solicitation::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:register_solicitation.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int register_response::kHeaderFieldNumber;
const int register_response::kTokenFieldNumber;
const int register_response::kRegnrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

register_response::register_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:register_response)
}

void register_response::InitAsDefaultInstance() {
}

register_response::register_response(const register_response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:register_response)
}

void register_response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regnr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

register_response::~register_response() {
  // @@protoc_insertion_point(destructor:register_response)
  SharedDtor();
}

void register_response::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regnr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void register_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* register_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return register_response_descriptor_;
}

const register_response& register_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fstruct_2eproto();
  return *default_instance_;
}

register_response* register_response::default_instance_ = NULL;

register_response* register_response::New(::google::protobuf::Arena* arena) const {
  register_response* n = new register_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void register_response::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    header_ = 0;
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_regnr()) {
      regnr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool register_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:register_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "register_response.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_regnr;
        break;
      }

      // optional string regnr = 3;
      case 3: {
        if (tag == 26) {
         parse_regnr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regnr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regnr().data(), this->regnr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "register_response.regnr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:register_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:register_response)
  return false;
#undef DO_
}

void register_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:register_response)
  // optional int32 header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_response.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional string regnr = 3;
  if (has_regnr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regnr().data(), this->regnr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_response.regnr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->regnr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:register_response)
}

::google::protobuf::uint8* register_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:register_response)
  // optional int32 header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_response.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional string regnr = 3;
  if (has_regnr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regnr().data(), this->regnr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_response.regnr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->regnr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:register_response)
  return target;
}

int register_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string regnr = 3;
    if (has_regnr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regnr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void register_response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const register_response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const register_response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void register_response::MergeFrom(const register_response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_regnr()) {
      set_has_regnr();
      regnr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regnr_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void register_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void register_response::CopyFrom(const register_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_response::IsInitialized() const {

  return true;
}

void register_response::Swap(register_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void register_response::InternalSwap(register_response* other) {
  std::swap(header_, other->header_);
  token_.Swap(&other->token_);
  regnr_.Swap(&other->regnr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata register_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = register_response_descriptor_;
  metadata.reflection = register_response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// register_response

// optional int32 header = 1;
bool register_response::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void register_response::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void register_response::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void register_response::clear_header() {
  header_ = 0;
  clear_has_header();
}
 ::google::protobuf::int32 register_response::header() const {
  // @@protoc_insertion_point(field_get:register_response.header)
  return header_;
}
 void register_response::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:register_response.header)
}

// optional string token = 2;
bool register_response::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void register_response::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void register_response::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void register_response::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& register_response::token() const {
  // @@protoc_insertion_point(field_get:register_response.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void register_response::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:register_response.token)
}
 void register_response::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:register_response.token)
}
 void register_response::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:register_response.token)
}
 ::std::string* register_response::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:register_response.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* register_response::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void register_response::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:register_response.token)
}

// optional string regnr = 3;
bool register_response::has_regnr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void register_response::set_has_regnr() {
  _has_bits_[0] |= 0x00000004u;
}
void register_response::clear_has_regnr() {
  _has_bits_[0] &= ~0x00000004u;
}
void register_response::clear_regnr() {
  regnr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regnr();
}
 const ::std::string& register_response::regnr() const {
  // @@protoc_insertion_point(field_get:register_response.regnr)
  return regnr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void register_response::set_regnr(const ::std::string& value) {
  set_has_regnr();
  regnr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:register_response.regnr)
}
 void register_response::set_regnr(const char* value) {
  set_has_regnr();
  regnr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:register_response.regnr)
}
 void register_response::set_regnr(const char* value, size_t size) {
  set_has_regnr();
  regnr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:register_response.regnr)
}
 ::std::string* register_response::mutable_regnr() {
  set_has_regnr();
  // @@protoc_insertion_point(field_mutable:register_response.regnr)
  return regnr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* register_response::release_regnr() {
  clear_has_regnr();
  return regnr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void register_response::set_allocated_regnr(::std::string* regnr) {
  if (regnr != NULL) {
    set_has_regnr();
  } else {
    clear_has_regnr();
  }
  regnr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regnr);
  // @@protoc_insertion_point(field_set_allocated:register_response.regnr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int connection_solicitation::kHeaderFieldNumber;
const int connection_solicitation::kTokenFieldNumber;
const int connection_solicitation::kRegnrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

connection_solicitation::connection_solicitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_solicitation)
}

void connection_solicitation::InitAsDefaultInstance() {
}

connection_solicitation::connection_solicitation(const connection_solicitation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_solicitation)
}

void connection_solicitation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regnr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connection_solicitation::~connection_solicitation() {
  // @@protoc_insertion_point(destructor:connection_solicitation)
  SharedDtor();
}

void connection_solicitation::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regnr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void connection_solicitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connection_solicitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connection_solicitation_descriptor_;
}

const connection_solicitation& connection_solicitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fstruct_2eproto();
  return *default_instance_;
}

connection_solicitation* connection_solicitation::default_instance_ = NULL;

connection_solicitation* connection_solicitation::New(::google::protobuf::Arena* arena) const {
  connection_solicitation* n = new connection_solicitation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void connection_solicitation::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    header_ = 0;
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_regnr()) {
      regnr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool connection_solicitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_solicitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "connection_solicitation.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_regnr;
        break;
      }

      // optional string regnr = 3;
      case 3: {
        if (tag == 26) {
         parse_regnr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regnr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regnr().data(), this->regnr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "connection_solicitation.regnr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_solicitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_solicitation)
  return false;
#undef DO_
}

void connection_solicitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_solicitation)
  // optional int32 header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connection_solicitation.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional string regnr = 3;
  if (has_regnr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regnr().data(), this->regnr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connection_solicitation.regnr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->regnr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:connection_solicitation)
}

::google::protobuf::uint8* connection_solicitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_solicitation)
  // optional int32 header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connection_solicitation.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional string regnr = 3;
  if (has_regnr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regnr().data(), this->regnr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connection_solicitation.regnr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->regnr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:connection_solicitation)
  return target;
}

int connection_solicitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string regnr = 3;
    if (has_regnr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regnr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connection_solicitation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const connection_solicitation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const connection_solicitation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connection_solicitation::MergeFrom(const connection_solicitation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_regnr()) {
      set_has_regnr();
      regnr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regnr_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void connection_solicitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connection_solicitation::CopyFrom(const connection_solicitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connection_solicitation::IsInitialized() const {

  return true;
}

void connection_solicitation::Swap(connection_solicitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void connection_solicitation::InternalSwap(connection_solicitation* other) {
  std::swap(header_, other->header_);
  token_.Swap(&other->token_);
  regnr_.Swap(&other->regnr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata connection_solicitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connection_solicitation_descriptor_;
  metadata.reflection = connection_solicitation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// connection_solicitation

// optional int32 header = 1;
bool connection_solicitation::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void connection_solicitation::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void connection_solicitation::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void connection_solicitation::clear_header() {
  header_ = 0;
  clear_has_header();
}
 ::google::protobuf::int32 connection_solicitation::header() const {
  // @@protoc_insertion_point(field_get:connection_solicitation.header)
  return header_;
}
 void connection_solicitation::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:connection_solicitation.header)
}

// optional string token = 2;
bool connection_solicitation::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void connection_solicitation::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void connection_solicitation::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void connection_solicitation::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& connection_solicitation::token() const {
  // @@protoc_insertion_point(field_get:connection_solicitation.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connection_solicitation::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_solicitation.token)
}
 void connection_solicitation::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_solicitation.token)
}
 void connection_solicitation::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_solicitation.token)
}
 ::std::string* connection_solicitation::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:connection_solicitation.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* connection_solicitation::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connection_solicitation::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:connection_solicitation.token)
}

// optional string regnr = 3;
bool connection_solicitation::has_regnr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void connection_solicitation::set_has_regnr() {
  _has_bits_[0] |= 0x00000004u;
}
void connection_solicitation::clear_has_regnr() {
  _has_bits_[0] &= ~0x00000004u;
}
void connection_solicitation::clear_regnr() {
  regnr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regnr();
}
 const ::std::string& connection_solicitation::regnr() const {
  // @@protoc_insertion_point(field_get:connection_solicitation.regnr)
  return regnr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connection_solicitation::set_regnr(const ::std::string& value) {
  set_has_regnr();
  regnr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_solicitation.regnr)
}
 void connection_solicitation::set_regnr(const char* value) {
  set_has_regnr();
  regnr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_solicitation.regnr)
}
 void connection_solicitation::set_regnr(const char* value, size_t size) {
  set_has_regnr();
  regnr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_solicitation.regnr)
}
 ::std::string* connection_solicitation::mutable_regnr() {
  set_has_regnr();
  // @@protoc_insertion_point(field_mutable:connection_solicitation.regnr)
  return regnr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* connection_solicitation::release_regnr() {
  clear_has_regnr();
  return regnr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connection_solicitation::set_allocated_regnr(::std::string* regnr) {
  if (regnr != NULL) {
    set_has_regnr();
  } else {
    clear_has_regnr();
  }
  regnr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regnr);
  // @@protoc_insertion_point(field_set_allocated:connection_solicitation.regnr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int connection_response::kHeaderFieldNumber;
const int connection_response::kIpFieldNumber;
const int connection_response::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

connection_response::connection_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_response)
}

void connection_response::InitAsDefaultInstance() {
}

connection_response::connection_response(const connection_response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_response)
}

void connection_response::SharedCtor() {
  _cached_size_ = 0;
  header_ = 0;
  ip_ = 0u;
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connection_response::~connection_response() {
  // @@protoc_insertion_point(destructor:connection_response)
  SharedDtor();
}

void connection_response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void connection_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connection_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connection_response_descriptor_;
}

const connection_response& connection_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fstruct_2eproto();
  return *default_instance_;
}

connection_response* connection_response::default_instance_ = NULL;

connection_response* connection_response::New(::google::protobuf::Arena* arena) const {
  connection_response* n = new connection_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void connection_response::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<connection_response*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(header_, port_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool connection_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 2;
      case 2: {
        if (tag == 16) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_response)
  return false;
#undef DO_
}

void connection_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_response)
  // optional int32 header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header(), output);
  }

  // optional uint32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:connection_response)
}

::google::protobuf::uint8* connection_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_response)
  // optional int32 header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header(), target);
  }

  // optional uint32 ip = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:connection_response)
  return target;
}

int connection_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }

    // optional uint32 ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connection_response::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const connection_response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const connection_response>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connection_response::MergeFrom(const connection_response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void connection_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connection_response::CopyFrom(const connection_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connection_response::IsInitialized() const {

  return true;
}

void connection_response::Swap(connection_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void connection_response::InternalSwap(connection_response* other) {
  std::swap(header_, other->header_);
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata connection_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connection_response_descriptor_;
  metadata.reflection = connection_response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// connection_response

// optional int32 header = 1;
bool connection_response::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void connection_response::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void connection_response::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void connection_response::clear_header() {
  header_ = 0;
  clear_has_header();
}
 ::google::protobuf::int32 connection_response::header() const {
  // @@protoc_insertion_point(field_get:connection_response.header)
  return header_;
}
 void connection_response::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:connection_response.header)
}

// optional uint32 ip = 2;
bool connection_response::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void connection_response::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void connection_response::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void connection_response::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
 ::google::protobuf::uint32 connection_response::ip() const {
  // @@protoc_insertion_point(field_get:connection_response.ip)
  return ip_;
}
 void connection_response::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:connection_response.ip)
}

// optional uint32 port = 3;
bool connection_response::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void connection_response::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void connection_response::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void connection_response::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 connection_response::port() const {
  // @@protoc_insertion_point(field_get:connection_response.port)
  return port_;
}
 void connection_response::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:connection_response.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int connection_acknowledgement::kHeaderFieldNumber;
const int connection_acknowledgement::kTokenFieldNumber;
const int connection_acknowledgement::kIpFieldNumber;
const int connection_acknowledgement::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

connection_acknowledgement::connection_acknowledgement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:connection_acknowledgement)
}

void connection_acknowledgement::InitAsDefaultInstance() {
}

connection_acknowledgement::connection_acknowledgement(const connection_acknowledgement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:connection_acknowledgement)
}

void connection_acknowledgement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0u;
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connection_acknowledgement::~connection_acknowledgement() {
  // @@protoc_insertion_point(destructor:connection_acknowledgement)
  SharedDtor();
}

void connection_acknowledgement::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void connection_acknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connection_acknowledgement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connection_acknowledgement_descriptor_;
}

const connection_acknowledgement& connection_acknowledgement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fstruct_2eproto();
  return *default_instance_;
}

connection_acknowledgement* connection_acknowledgement::default_instance_ = NULL;

connection_acknowledgement* connection_acknowledgement::New(::google::protobuf::Arena* arena) const {
  connection_acknowledgement* n = new connection_acknowledgement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void connection_acknowledgement::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<connection_acknowledgement*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(header_, port_);
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool connection_acknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:connection_acknowledgement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 header = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "connection_acknowledgement.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 3;
      case 3: {
        if (tag == 24) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:connection_acknowledgement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:connection_acknowledgement)
  return false;
#undef DO_
}

void connection_acknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:connection_acknowledgement)
  // optional int32 header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->header(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connection_acknowledgement.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint32 ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:connection_acknowledgement)
}

::google::protobuf::uint8* connection_acknowledgement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:connection_acknowledgement)
  // optional int32 header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->header(), target);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connection_acknowledgement.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint32 ip = 3;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ip(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:connection_acknowledgement)
  return target;
}

int connection_acknowledgement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connection_acknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const connection_acknowledgement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const connection_acknowledgement>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connection_acknowledgement::MergeFrom(const connection_acknowledgement& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void connection_acknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connection_acknowledgement::CopyFrom(const connection_acknowledgement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connection_acknowledgement::IsInitialized() const {

  return true;
}

void connection_acknowledgement::Swap(connection_acknowledgement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void connection_acknowledgement::InternalSwap(connection_acknowledgement* other) {
  std::swap(header_, other->header_);
  token_.Swap(&other->token_);
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata connection_acknowledgement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connection_acknowledgement_descriptor_;
  metadata.reflection = connection_acknowledgement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// connection_acknowledgement

// optional int32 header = 1;
bool connection_acknowledgement::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void connection_acknowledgement::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void connection_acknowledgement::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void connection_acknowledgement::clear_header() {
  header_ = 0;
  clear_has_header();
}
 ::google::protobuf::int32 connection_acknowledgement::header() const {
  // @@protoc_insertion_point(field_get:connection_acknowledgement.header)
  return header_;
}
 void connection_acknowledgement::set_header(::google::protobuf::int32 value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:connection_acknowledgement.header)
}

// optional string token = 2;
bool connection_acknowledgement::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void connection_acknowledgement::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void connection_acknowledgement::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void connection_acknowledgement::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& connection_acknowledgement::token() const {
  // @@protoc_insertion_point(field_get:connection_acknowledgement.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connection_acknowledgement::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:connection_acknowledgement.token)
}
 void connection_acknowledgement::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:connection_acknowledgement.token)
}
 void connection_acknowledgement::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:connection_acknowledgement.token)
}
 ::std::string* connection_acknowledgement::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:connection_acknowledgement.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* connection_acknowledgement::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void connection_acknowledgement::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:connection_acknowledgement.token)
}

// optional uint32 ip = 3;
bool connection_acknowledgement::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void connection_acknowledgement::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void connection_acknowledgement::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void connection_acknowledgement::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
 ::google::protobuf::uint32 connection_acknowledgement::ip() const {
  // @@protoc_insertion_point(field_get:connection_acknowledgement.ip)
  return ip_;
}
 void connection_acknowledgement::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:connection_acknowledgement.ip)
}

// optional uint32 port = 4;
bool connection_acknowledgement::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void connection_acknowledgement::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void connection_acknowledgement::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void connection_acknowledgement::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 connection_acknowledgement::port() const {
  // @@protoc_insertion_point(field_get:connection_acknowledgement.port)
  return port_;
}
 void connection_acknowledgement::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:connection_acknowledgement.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
